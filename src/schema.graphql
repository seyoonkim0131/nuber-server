type ReadBoardOneResponse {
  ok: Boolean!
  error: String
  board: Board
}

type Query {
  ReadBoardOne: ReadBoardOneResponse!
  sayBye: String!
  sayHello(name: String!): SayHelloResponse!
}

type Board {
  no: Int!
  title: String!
  body: String
  file: String
  create: Int!
  createDate: String!
  update: Int!
  updateDate: String!
}

type Chat {
  id: Int!
  messages: [Message]
  participants: [User]
  cratedAt: String!
  updatedAt: String
}

type Message {
  id: Int!
  text: String!
  chat: Chat!
  user: User!
  cratedAt: String!
  updatedAt: String
}

type SayHelloResponse {
  text: String!
  error: Boolean!
}

type Place {
  id: Int!
  name: String!
  lat: Float!
  lng: Float!
  address: String!
  isFav: Boolean!
  cratedAt: String!
  updatedAt: String
}

type Ride {
  id: Int!
  status: String!
  pickUpAddress: String!
  pickUpLat: Float!
  pickUpLng: Float!
  dropOffAddress: String!
  dropOffLAt: Float!
  dropOffLng: Float!
  price: Float!
  distance: String!
  duration: String!
  driver: User!
  passenger: User!
  createdAt: String!
  updatedAt: String
}

type CompletePhoneVerificationResponse {
  ok: Boolean!
  error: String
  token: String
}

type Mutation {
  CompletePhoneVerification(phoneNumber: String!, key: String!): CompletePhoneVerificationResponse!
  SignIn(id: String!, password: String!): SignInResponse!
  StartPhoneVerification(phoneNumber: String!): StartPhoneVerificationResponse!
}

type User {
  no: Int!
  id: String!
  name: String!
  password: String
}

type SignInResponse {
  ok: Boolean!
  error: String
  token: String
}

type StartPhoneVerificationResponse {
  ok: Boolean!
  error: String
}

type Verification {
  id: Int!
  target: String!
  payload: String!
  key: String!
  verified: Boolean!
  cratedAt: String!
  updatedAt: String!
}
